1.Write a shell program to calculate sum of two numbers.
->
echo "Enter 1 st term"
read a
echo "Enter 2nd term"
read b
sum=`expr $a + $b`
echo $sum

#################################################################

2.Write a shell program to calculate subtraction.
->
echo "Enter 1 st term"
read a
echo "Enter 2nd term"
read b
sum=`expr $a - $b`
echo $sum

#################################################################

3.Write a shell program to calculate average of three numbers.
->
echo "Enter 1st Number"
read a
echo "Enter 2nd Number"
read b
echo "Enter 3rd Number"
read c
sum=$((a + b + c))
avg=$(( sum / 3))
echo "Average of three number is= $avg"

##################################################################

4.Write a shell program to calculate area of a rectangle
->
echo "Enter length of rectangle"
read l
echo "Enter width of rectangle"
read w
area=$((l * w))
echo "Area of rectangle = $area"

#################################################################

5.Write a shell program to calculate area of a square.
->
echo "Enter side of square"
read a
area=$((a * a))
echo "Area of square = $area"

#################################################################

6.Write a shell program to find the perimeter of a rectangle.
->
echo "Enter length of rectangle"
read l
echo "Enter width of rectangle"
read w
s=$((l + w))
per=$((2 * s))
echo "Perimeter of rectangle is= $per"

#################################################################

7.Write a shell program to find the perimeter of a square.
->
echo "Enter side of square"
read a
per=$((4 * a))
echo "Perimeter of square is= $per"

#################################################################

8.Write a shell program to calculate the product of two numbers.
->
echo "Enter 1st number"
read n1
echo "Enter 2nd number"
read n2
pro=$((n1 * n2))
echo "product of two number is= $pro"

#################################################################

9.Write a shell program to calculate division.
->
echo "Enter 1st number"
read n1
echo "Enter 2nd number"
read n2
div=$((n1 / n2))
echo "divison of two number is= $div"

#################################################################

10.Write a shell program to print factorial of a given number.
->
echo "Enter a number which factorial you want"
read n
fact=1
for (( i=1; i<=n; i++ ))
do
fact=$((fact * i))
done
echo "Factorial of the number $n will be $fact"

#################################################################

11.Write a shell program to check if a given number is a Armstrong number or not.
->
echo "Enter a number "
read n
t=$n
sum=0
while [ $n -gt 0 ];
do
r=$((n % 10))
s=$((r * r * r))
sum=$((sum + s))
n=$((n / 10))
done
if [ $t == $sum ]; then
  echo "Number is Amstrong"
else
echo "Number is not Amstrong"
fi

###############################################################

12.Write a shell program to print Fibonacci series upto a given number.
->
echo "Enter no of terms"
read n
t1=0
t2=1
nt=$((t1 + t2))
echo "fibronacci series "
echo $t1
echo $t2
for (( i=3; i<=n; i++ ))
do
  echo $nt
  t1=$t2
  t2=$nt
  nt=$((t1 + t2))
done

##############################################################

13.Write a shell program to check if a number is a prime number or not.
->
echo "Enter the number"
read num
flag=0
for (( i=2; i<num; i++ ))
do
   if [ $((num%i)) == 0 ]; then
    flag=1
    break
fi
   
done
if [ $flag == 1 ]; then
echo "Item is not prime"
else
echo "Item is prime"
fi

##############################################################

15.Write a shell program to make calculator.
->
echo "Enter two number"
read num1
read num2
echo "Enter choice"
echo "1: for addition"
echo "2: for subtraction"
echo "3: for multiplication"
echo "4: for divison"
read ch
case $ch in

  1)res=$((num1 + num2))
    echo "Result is $res"
    ;;

  2)res=$((num1 - num2))
    echo "Result is $res"
    ;;

  3)res=$((num1 * num2))
    echo "Result is $res"
    ;;
  4)res=$((num1 / num2))
    echo "Result is $res"
    ;;
  *)
    echo "invalid"
    ;;
esac

###############################################################

16.Write a shell program to check if a number is palindrome or not.
->
echo "Enter  number"
read num
rev=0
t=$num
while [ $num -gt 0 ];
do
    
    r=$((num % 10))
    re=$((rev * 10))
    rev=$((re + r))
    num=$((num / 10))
done
if [ $t == $rev ]; then
  echo "Number is pallindrome"
  else
  echo "Number is not pallindrome"
fi

################################################################

17.Write a shell program to print patterns.
   1. *
      **
      ***
      ****
->
echo "Enter no of row"
read n
for (( i=0; i<n; i++ ))
do
for(( j=0 ; j<i ; j++ ))
do
echo -n "*"
done
echo
done

   2.1
     1 2
     1 2 3
     1 2 3 4 

->
echo "Enter no of row"
read n
for (( i=0; i<n; i++ ))
do
for(( j=0 ; j<i ; j++ ))
do
echo -n "$((j+1))"
done
echo
done

   3.****
     ***
     **
     *

->
echo "Enter no of row"
read n
for (( i=n; i>0; i-- ))
do
for(( j=i ; j>0 ; j-- ))
do
echo -n "*"
done
echo
done

   4.
                  1                                               
            2     3    2                                      
       3    4     5    4   3                             
  4    5    6     7    6   5   4

->
echo "Enter no of rows"
read r
num=1
for((i=1; i<=$r; i++))
do
  for((j=1; j<=$r - $i; j++))
  do
    echo -n "  "
  done
  num=$i
  k=1
  for((j=1; j<=2*$i - 1; j++))
  do
    if [ $j -lt $i ];
    then
      echo -n "$num "
      num=$((num + 1))
    elif [ $j -eq $i ];
    then
      echo -n "$num "
      num=$((num - 1))
    else
      echo -n "$num "
      num=$((num - 1))
    fi
  done
  echo
done

    5. *
      ***
     *****
    *******

->
echo "Enter no of row"
read p
for((m=1; m<=p; m++))
do
    for((a=m; a<=p; a++))
    do
      echo -ne " ";
    done
     
    for((n=1; n<=m; n++))
    do
      echo -ne "*";
    done
    for((i=1; i<m; i++))
    do
      echo -ne "*";
    done
    echo;
done

###########################################################################################

18. Write a program in C to implement  Producer Consumer problem using Semaphore

#include <stdio.h>
#include <stdlib.h>
int mutex = 1, full = 0, empty = 5, x = 0;
int main()
{
  int n;
  void producer();
  void consumer();
  int wait(int);
  int signal(int);
  while (1)
  {
    printf("\n\n1->Producer\n2->Consumer\n3->Exit\n ");
    scanf("%d", &n);
    switch (n)
    {
    case 1:
      if ((mutex == 1) && (empty != 0))
        producer();
      else
        printf("Buffer is full!!");
      break;
    case 2:
      if ((mutex == 1) && (full != 0))
        consumer();
      else
        printf("Buffer is empty!!");
      break;
    case 3:
      exit(0);
      break;
    default:
      printf("Wrong Choice!!!");
    }
  }
  return 0;
}
int wait(int s) { return (--s); }
int signal(int s) { return (++s); }
void producer()
{
  mutex = wait(mutex);
  full = signal(full);
  empty = wait(empty);
  x++;
  printf("Producer produces the item %d", x);
  mutex = signal(mutex);
}
void consumer()
{
  mutex = wait(mutex);
  full = wait(full);
  empty = signal(empty);
  printf("Consumer consumes item %d", x);
  x--;
  mutex = signal(mutex);
}
###########################################################################################

19. Write a program in C in linux to implement fork() system cell

#include <stdio.h>
#include <unistd.h>
int main()
{
    fork();
    printf("BWU");
    return 0;
}
###########################################################################################

20. Write a program in C to calculate average waiting time and average turn around time of 4 process where the execution time is given is given by the user(using FCFS)

#include <stdio.h>
int main()
{
    int n = 4, i;
    int burst_time[n], waiting_time[n], turnaround_time[n];
    float avg_waiting_time = 0, avg_turnaround_time = 0;
    printf("Enter burst time for each process:\n");
    for (i = 0; i < n; i++)
    {
        printf("P%d: ", i + 1);
        scanf("%d", &burst_time[i]);
    }
    waiting_time[0] = 0;
    for (i = 1; i < n; i++)
    {
        waiting_time[i] = waiting_time[i - 1] + burst_time[i - 1];
    }
    for (i = 0; i < n; i++)
    {
        turnaround_time[i] = waiting_time[i] + burst_time[i];
    }

    for (i = 0; i < n; i++)
    {
        avg_waiting_time += waiting_time[i];
        avg_turnaround_time += turnaround_time[i];
    }
    avg_waiting_time /= n;
    avg_turnaround_time /= n;
    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++)
    {
        printf("P%d\t%d\t\t%d\t\t%d\n", i + 1, burst_time[i], waiting_time[i],
        turnaround_time[i]);
    }
    printf("Average Waiting Time: %0.2f\n", avg_waiting_time);
    printf("Average Turnaround Time: %0.2f\n", avg_turnaround_time);
    return 0;
}

#############################################################################################

21. Write a program in calculate average waiting time and average turn around time using SJF.

#include <stdio.h>
#include <stdlib.h>
struct process
{
    int pid;
    int burst_time;
    int waiting_time;
    int turnaround_time;
};

int compare(const void *p1, const void *p2)
{
    const struct process *process1 = (const struct process *)p1;
    const struct process *process2 = (const struct process *)p2;

    if (process1->burst_time < process2->burst_time)
    {
        return -1;
    }
    else if (process1->burst_time > process2->burst_time)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int main()
{
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct process *processes = malloc(n * sizeof(struct process));

    printf("Enter the burst time of each process:\n");
    for (int i = 0; i < n; i++)
    {
        printf("P%d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        processes[i].pid = i + 1;
    }

    qsort(processes, n, sizeof(struct process), compare);

    processes[0].waiting_time = 0;
    processes[0].turnaround_time = processes[0].burst_time;

    for (int i = 1; i < n; i++)
    {
        processes[i].waiting_time = processes[i - 1].turnaround_time;
        processes[i].turnaround_time =
            processes[i].waiting_time + processes[i].burst_time;
    }

    int total_waiting_time = 0;
    int total_turnaround_time = 0;

    printf("PID\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++)
    {
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].burst_time,
               processes[i].waiting_time, processes[i].turnaround_time);

        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    float avwt = (float)total_waiting_time / n;
    float avtat = (float)total_turnaround_time / n;

    printf("Average Waiting Time: %.2f\n", avwt);
    printf("Average Turnaround Time: %.2f\n", avtat);

    free(processes);

    return 0;
}

################################################################################################

22. cheaking safe sequence using bankers algorithm

#include <stdio.h>
int main() {

  int n, m, i, j, k;
  n = 5;
  m = 3; 
  int alloc[5][3] = {
      {0, 1, 0},
      {2, 0, 0},
      {3, 0, 2},
      {2, 1, 1},
      {0, 0, 2} 
  }; 
  int max[5][3] = {
    {7, 5, 3},
    {3, 2, 2},
    {9, 0, 2},
    {2, 2, 2},
    {4, 3, 3}
  }; 

  int avail[3] = {3, 3, 2};

  int f[n], ans[n], ind = 0;
  for (k = 0; k < n; k++)
    f[k] = 0;
  int need[n][m];
  for (i = 0; i < n; i++) {
    for (j = 0; j < m; j++)
      need[i][j] = max[i][j] - alloc[i][j];
  }
  int y = 0;
  for (k = 0; k < n; k++) {
    for (i = 0; i < n; i++) {
      if (f[i] == 0) {
        int flag = 0;
        for (j = 0; j < m; j++) {
          if (need[i][j] > avail[j]) {
            flag = 1;
            break;
          }
        }
        if (flag == 0) {
          ans[ind++] = i;
          for (y = 0; y < m; y++)
            avail[y] += alloc[i][y];
          f[i] = 1;
        }
      }
    }
  }

  int flag = 1;
  for (int i = 0; i < n; i++) {
    if (f[i] == 0) {
      flag = 0;
      printf("The following system is not safe");
      break;
    }
  }
  if (flag == 1) {
    printf("Following is the SAFE Sequence\n");
    for (i = 0; i < n - 1; i++)
      printf(" P%d ->", ans[i]);
    printf(" P%d", ans[n - 1]);
  }
  return (0);
}

###############################################################################################

23. Write a program in C to implement the dining philosopher problem

#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
sem_t room;
sem_t chopstick[5];
void *philosopher(void *);
void eat(int);
int main()
{
    int i, a[5];
    pthread_t tid[5];
    sem_init(&room, 0, 4);
    for (i = 0; i < 5; i++)
        sem_init(&chopstick[i], 0, 1);
    for (i = 0; i < 5; i++)
    {
        a[i] = i;
        pthread_create(&tid[i], NULL, philosopher, (void *)&a[i]);
    }
    for (i = 0; i < 5; i++)
        pthread_join(tid[i], NULL);
}

void *philosopher(void *num)
{
    int phil = *(int *)num;

    sem_wait(&room);
    printf("\nPhilosopher %d has entered room", phil);
    sem_wait(&chopstick[phil]);
    sem_wait(&chopstick[(phil + 1) % 5]);

    eat(phil);
    sleep(2);
    printf("\nPhilosopher %d has finished eating", phil);

    sem_post(&chopstick[(phil + 1) % 5]);
    sem_post(&chopstick[phil]);
    sem_post(&room);
}
void eat(int phil) { 
  printf("\nPhilosopher %d is eating", phil); 
}
#############################################################################
Commands :

1.whoiam
2.date
3.cal
4.date+%n
5.date+%f
6.date+%d
7.date+%h
8.date+%m
9.date+%W
10.date+%H:%M:%S
11.mkdir cse / cs
12.cd cse / cat > OS
13.cat OS
14.cat>>OS
15.cat OS
16.man is
17.ls-l
18.cp OS OS1/cat OS1
19.grep CSE OS1
20.cat>OS1
21.sort n OS1
22.sort _nr OS1